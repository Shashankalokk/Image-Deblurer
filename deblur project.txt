import os
import random
os.environ["CUDA_VISIBLE_DEVICES"] = "0"  # Set the ID of your dedicated GPU

from tqdm import tqdm
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, Conv2DTranspose, LeakyReLU
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.callbacks import ReduceLROnPlateau
from tensorflow.keras import backend as K
from sklearn.model_selection import train_test_split
import cv2
physical_devices = tf.config.list_physical_devices('GPU')
for device in physical_devices:
    tf.config.experimental.set_memory_growth(device, True)



# Dataset paths
dataset_path = 'D:\\backup\desktop\\blur_dataset_scaled'
IN = 'D:\\backup\desktop\\blur_dataset_scaled\defocused_blurred'
OUT = 'D:\\backup\desktop\\blur_dataset_scaled\sharp'

# Data loading and preprocessing
def load_data(path):
    result = []
    for file in tqdm(sorted(os.listdir(path))):
        if any(extension in file for extension in ['.jpg', 'jpeg', '.png']):
            image = load_img(path + '/' + file, target_size=(224, 224))
            image = img_to_array(image).astype('float32') / 255
            result.append(image)
    return np.array(result)

input_images = load_data(IN)
output_images = load_data(OUT)
input_images = np.array([cv2.blur(img, (10, 10)) for img in output_images])  # Apply Gaussian Blur

# Split the preprocessed data into training and validation sets
x_train, x_test, y_train, y_test = train_test_split(input_images, output_images, test_size=0.1, random_state=42)



# Network Parameters
input_shape = (224, 224, 3)
batch_size = 32
epochs = 30



# Model architecture
def build_model():
    inputs = Input(shape=input_shape)
    conv1 = Conv2D(64, kernel_size=(3, 3), strides=1, padding='same', activation=LeakyReLU())(inputs)
    conv2 = Conv2D(128, kernel_size=(3, 3), padding='same', activation=LeakyReLU())(conv1)
    conv3 = Conv2D(256, kernel_size=(3, 3), strides=1, padding='same', activation=LeakyReLU())(conv2)
    deconv3 = Conv2DTranspose(256, kernel_size=(3, 3), strides=1, padding='same', activation=LeakyReLU())(conv3)
    deconv2 = Conv2DTranspose(128, kernel_size=(3, 3), strides=1, padding='same', activation=LeakyReLU())(deconv3)
    deconv1 = Conv2DTranspose(64, kernel_size=(3, 3), strides=1, padding='same', activation="relu")(deconv2)
    deconv0 = Conv2DTranspose(32, kernel_size=(3, 3), strides=1, padding='same', activation="sigmoid")(deconv1)
    outputs = Conv2DTranspose(3, kernel_size=(3, 3), strides=1, padding='same', activation="sigmoid")(deconv0)

    model = Model(inputs=inputs, outputs=outputs)
    return model

model = build_model()

# Print the model summary
model.summary()

# Loss functions
def SSIMLoss(y_true, y_pred):
    return 1 - tf.reduce_mean(tf.image.ssim(y_true, y_pred, 1.0))

def PSNR(y_true, y_pred):
    max_pixel = 1.0
    return (10.0 * K.log((max_pixel ** 2) / (K.mean(K.square(y_pred - y_true), axis=-1)))) / 2.303

# Compile the model
model.compile(loss='mse', optimizer='adam', metrics=["acc", SSIMLoss, PSNR])

# Learning rate reduction callback
lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1), cooldown=0, patience=5, verbose=1)
callbacks = [lr_reducer]

# Train the model
history = model.fit(x_train, y_train, validation_split=0.2, epochs=30, batch_size=batch_size, callbacks=callbacks)

# Save the model
model.save('image_deblurrer')

# Visualize sample results
import random

print("\n       Input                        Ground Truth                  Predicted Value")
for i in range(3):
    r = random.randint(0, len(x_test) - 1)
    x, y = x_train[r], y_train[r]
    x_inp = x.reshape(1, 224, 224, 3)
    result = model.predict(x_inp)
    result = result.reshape(224, 224, 3)
    fig = plt.figure(figsize=(12, 10))
    fig.subplots_adjust(hspace=0.1, wspace=0.2)

    ax = fig.add_subplot(1, 3, 1)
    ax.imshow(x)
    ax = fig.add_subplot(1, 3, 2)
    ax.imshow(y)
    ax = fig.add_subplot(1, 3, 3)
    plt.imshow(result)